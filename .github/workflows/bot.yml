name: AHQ Store Issues Bot

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  issues: write

jobs:
  startup:
    name: Initial Check

    runs-on: ubuntu-latest

    outputs:
      shouldRunAsString: ${{ steps.run.outputs.result }}
      dwnl: ${{ steps.dwnl.outputs.result }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: If checks should run
        uses: actions/github-script@v8
        id: run
        with:
          result-encoding: string
          script: |
            const body = context.payload.comment.body;

            const output = body.startsWith("/store set ") ? "true" : "false"

            if (output == "true") {
              await github.rest.issues.createComment({
                issue_number: context.payload.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `@${context.payload.comment.user.login} Please wait while we scan your binaries. It might take a while (especially for apps that have apk files)`
              });
            }

            return output;

      - name: Find Download URL for Schema
        uses: actions/github-script@v8
        id: dwnl
        with:
          result-encoding: string
          script: |
            const body = context.payload.comment.body;

            return body.replace("/store set ", "")

  mobsf:
    needs: [startup]

    name: Scan using MobSF (Android)

    runs-on: ubuntu-latest

    if: needs.startup.outputs.shouldRunAsString == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Download
        run: |
          cargo run --manifest-path ./avdwnl/Cargo.toml
        env:
          DWNL_URL: ${{ needs.startup.outputs.dwnl }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install & Run
        continue-on-error: true
        run: |
          npm i -g pnpm

          cd av 
          pnpm install
          cd ..

          # Fetch the docker image
          docker pull opensecurity/mobile-security-framework-mobsf:latest

          # Run & Forget about it
          docker run --rm -p 8000:8000 opensecurity/mobile-security-framework-mobsf:latest & true

          sleep 45

          # Get the av key
          node av/getApiKey.js

          data=$(cat ./token)
          echo "Found key: $data"

          # Finally run the av to upload
          node av/upload.mjs

          # Scan
          node av/scan.mjs

      - name: Upload
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          path: |
            ./android-alldata.json
            ./android-appsec.json
          name: android

  win32:
    needs: [startup]

    name: Scan using Windows Defender

    runs-on: windows-latest

    if: needs.startup.outputs.shouldRunAsString == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Download
        run: |
          cargo run --manifest-path ./avdwnl/Cargo.toml
        env:
          DWNL_URL: ${{ needs.startup.outputs.dwnl }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run
        shell: pwsh
        continue-on-error: true
        timeout-minutes: 10
        run: |
          Remove-MpPreference -ExclusionPath (Get-MpPreference).ExclusionPath
          Set-Service -Name wuauserv -StartupType Manual -Status Running

          C:\"Program Files\Windows Defender\MpCmdRun.exe" -SignatureUpdate

          node av/win32.js

      - name: Upload
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          path: ./report.json
          name: win32

  clamav:
    needs: [startup]

    name: Scan using ClamAV (Linux mainly)

    runs-on: ubuntu-latest

    if: needs.startup.outputs.shouldRunAsString == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Start ClamAV daemon clamd
        uses: toblux/start-clamd-github-action@v0.2.1
        with: # Custom inputs are optional (these are the default values)
          unix_socket: /tmp/clamd.socket
          tcp_port: 3310
          stream_max_length: 1M

      - name: Ping clamd on TCP port 3310
        run: echo PING | nc localhost 3310

      - name: Ping clamd using the Unix socket
        run: echo PING | nc -U /tmp/clamd.socket

      - name: Write GitHub event to file
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            fs.writeFileSync("./event.json", JSON.stringify(context.payload));

      - name: Installing Dependencies and run bot
        continue-on-error: true
        run: |
          sudo systemctl stop clamav-freshclam.service
          sudo freshclam || true
          sudo systemctl start clamav-freshclam.service

          sudo /etc/init.d/clamav-daemon start

          npm i -g pnpm

          cd av
          pnpm install
          cd ..

          sudo apt-get update
          sudo apt-get install tree
          cargo run --manifest-path ./avdwnl/Cargo.toml

          tree samples/

          node av/clamav.js
        env:
          DWNL_URL: ${{ needs.startup.outputs.dwnl }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          path: ./report.json
          name: linux

  runbot:
    name: AHQ Store Bot Auto Response
    needs: [startup, clamav, mobsf, win32]
    runs-on: ubuntu-latest

    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Setup NodeJS
        uses: actions/setup-node@v4

      - name: Install deps
        run: npm i .
        working-directory: events

      - name: Check Queue
        uses: ahmadnassri/action-workflow-queue@v1

      - name: Pull
        run: git pull

      - name: Download artifacts
        uses: actions/download-artifact@v5
        continue-on-error: true
        with:
          path: reports
          merge-multiple: false

      - name: Gen full AV Report
        if: needs.startup.outputs.shouldRunAsString == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install tree

          tree ./reports/

          node events/issue_comment/genFullAvReport.js

      - name: Run
        uses: actions/github-script@v7
        with:
          script: |
            require("./events/issue_comment/index.js")(github, context)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GitHub
        uses: EndBug/add-and-commit@v9
        with:
          author_name: AHQ Store Bot
          message: Refresh Entries
